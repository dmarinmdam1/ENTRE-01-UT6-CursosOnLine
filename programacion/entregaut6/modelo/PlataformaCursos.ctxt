#BlueJ class context
comment0.target=PlataformaCursos
comment0.text=\r\n\ Un\ objeto\ de\ esta\ clase\ mantiene\ una\ \r\n\ colecci\u00F3n\ map\ que\ asocia\ \ categor\u00EDas\ (las\ claves)\ con\r\n\ la\ lista\ (una\ colecci\u00F3n\ ArrayList)\ de\ cursos\ que\ pertenecen\ a\ esa\ categor\u00EDa\ \r\n\ Por\ ej.\ una\ entrada\ del\ map\ asocia\ la\ categor\u00EDa\ 'BASES\ DE\ DATOS"'\ con\r\n\ una\ lista\ de\ cursos\ de\ esa\ categor\u00EDa\r\n\ \r\n\ Las\ claves\ en\ el\ map\ se\ recuperan\ en\ orden\ alfab\u00E9tico\ y\ \r\n\ se\ guardan\ siempre\ en\ may\u00FAsculas\r\n\ \r\n\ @author\ Daniel\ Mar\u00EDn\ Martos\r\n
comment1.params=
comment1.target=PlataformaCursos()
comment1.text=\r\n\ Constructor\ \ \r\n
comment10.params=
comment10.target=java.lang.String\ cursoMasAntiguo()
comment10.text=\r\n\ \ \ Devuelve\ el\ nombre\ del\ curso\ m\u00E1s\ antiguo\ en\ la\r\n\ \ \ plataforma\ (el\ primero\ publicado)\r\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment11.text=\r\n\ \ \r\n
comment2.params=categoria\ curso
comment2.target=void\ addCurso(java.lang.String,\ Curso)
comment2.text=\r\n\ a\u00F1adir\ un\ nuevo\ curso\ al\ map\ en\ la\ categor\u00EDa\ indicada\r\n\ Si\ ya\ existe\ la\ categor\u00EDa\ se\ a\u00F1ade\ en\ ella\ el\ nuevo\ curso\r\n\ (al\ final\ de\ la\ lista)\r\n\ En\ caso\ contrario\ se\ crear\u00E1\ una\ nueva\ entrada\ en\ el\ map\ con\r\n\ la\ nueva\ categor\u00EDa\ y\ el\ curso\ que\ hay\ en\ ella\r\n\ Las\ claves\ siempre\ se\ a\u00F1aden\ en\ may\u00FAsculas\ \ \r\n\ \ \r\n
comment3.params=categoria
comment3.target=int\ totalCursosEn(java.lang.String)
comment3.text=\r\n\ \ Devuelve\ la\ cantidad\ de\ cursos\ en\ la\ categor\u00EDa\ indicada\r\n\ \ Si\ no\ existe\ la\ categor\u00EDa\ devuelve\ -1\r\n\r\n
comment4.params=
comment4.target=java.lang.String\ toString()
comment4.text=\r\n\ Representaci\u00F3n\ textual\ de\ la\ plataforma\ (el\ map),\ cada\ categor\u00EDa\r\n\ junto\ con\ el\ n\u00BA\ total\ de\ cursos\ que\ hay\ en\ ella\ y\ a\ continuaci\u00F3n\r\n\ la\ relaci\u00F3n\ de\ cursos\ en\ esa\ categor\u00EDa\ (ver\ resultados\ de\ ejecuci\u00F3n)\r\n\ \r\n\ De\ forma\ eficiente\ ya\ que\ habr\u00E1\ muchas\ concatenaciones\r\n\ \r\n\ Usar\ el\ conjunto\ de\ entradas\ y\ un\ iterador\r\n
comment5.params=
comment5.target=void\ escribir()
comment5.text=\r\n\ Mostrar\ la\ plataforma\r\n
comment6.params=
comment6.target=void\ leerDeFichero()
comment6.text=\r\n\ \ Lee\ de\ un\ fichero\ de\ texto\ la\ informaci\u00F3n\ de\ los\ cursos\r\n\ \ En\ cada\ l\u00EDnea\ del\ fichero\ se\ guarda\ la\ informaci\u00F3n\ de\ un\ curso\r\n\ \ con\ el\ formato\ "categoria\:nombre\:fecha\ publicacion\:nivel"\r\n\ \ \r\n
comment7.params=lineaCurso
comment7.target=Curso\ obtenerCurso(java.lang.String)
comment7.text=\r\n\ \ Dado\ un\ String\ con\ los\ datos\ de\ un\ curso\r\n\ \ obtiene\ y\ devuelve\ un\ objeto\ Curso\r\n\r\n\ \ Ej.\ a\ partir\ de\ \ "sql\ essential\ training\:\ 3/12/2019\ \:\ principiante\ "\ \r\n\ \ obtiene\ el\ objeto\ Curso\ correspondiente\r\n\ \ \r\n\ \ Asumimos\ todos\ los\ valores\ correctos\ aunque\ puede\ haber\ \r\n\ \ espacios\ antes\ y\ despu\u00E9s\ de\ cada\ dato\r\n
comment8.params=
comment8.target=java.util.TreeSet\ obtenerCategorias()
comment8.text=\r\n\ devuelve\ un\ nuevo\ conjunto\ con\ los\ nombres\ de\ todas\ las\ categor\u00EDas\ \ \r\n\ \ \r\n
comment9.params=categoria\ nivel
comment9.target=java.util.TreeSet\ borrarCursosDe(java.lang.String,\ Nivel)
comment9.text=\r\n\ borra\ de\ la\ plataforma\ los\ cursos\ de\ la\ categor\u00EDa\ y\ nivel\ indicados\r\n\ Se\ devuelve\ un\ conjunto\ (importa\ el\ orden)\ con\ los\ nombres\ de\ los\ cursos\ borrados\ \r\n\ \r\n\ Asumimos\ que\ existe\ la\ categor\u00EDa\r\n\ \ \r\n
numComments=12
